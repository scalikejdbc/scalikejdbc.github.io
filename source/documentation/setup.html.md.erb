---
title: Setup - ScalikeJDBC
---

## Setup

<hr/>
ScalikeJDBC libraries are available on the Maven central repository.

[https://search.maven.org/search?q=org.scalikejdbc](https://search.maven.org/search?q=org.scalikejdbc)

<hr/>
### Core Library & Interpolation
<hr/>

To get started with ScalikeJDBC, add the latest version of the core library along with the necessary JDBC driver and an SLF4J implementation to your project's build configuration. Here's how you can do this in your `build.sbt` file:

```scala
libraryDependencies ++= Seq(
  "org.scalikejdbc" %% "scalikejdbc"       % "<%= version %>",
  "com.h2database"  %  "h2"                % "<%= h2_version %>",
  "ch.qos.logback"  %  "logback-classic"   % "<%= logback_version %>"
)
```

In your app code, add the following line of code to import the module:

```scala
import scalikejdbc._
```

<hr/>
### Testing Support
<hr/>

Using `scalikejdbc-test` is highly recommended to improve your application.

```scala
libraryDependencies ++= Seq(
  "org.scalikejdbc" %% "scalikejdbc"        % "<%= version %>",
  "org.scalikejdbc" %% "scalikejdbc-test"   % "<%= version %>"   % "test",
  "com.h2database"  %  "h2"                 % "<%= h2_version %>",
  "ch.qos.logback"  %  "logback-classic"    % "<%= logback_version %>"
)
```

Usage: [/documentation/testing](/documentation/testing.html)

<hr/>
### Typesafe Config Reader
<hr/>

If you use `application.conf` as settings file, add `scalikejdbc-config` too.

```scala
libraryDependencies ++= Seq(
  "org.scalikejdbc" %% "scalikejdbc"         % "<%= version %>",
  "org.scalikejdbc" %% "scalikejdbc-config"  % "<%= version %>",
  "com.h2database"  %  "h2"                  % "<%= h2_version %>",
  "ch.qos.logback"  %  "logback-classic"     % "<%= logback_version %>"
)
```

Usage: [/documentation/configuration](/documentation/configuration.html)

<hr/>
### Reverse Engineering
<hr/>

ScalikeJDBC support reverse engineering Scala code from existing database.
You need to setup an sbt plugin named `scalikejdbc-mapper-generator`.

##### project/plugins.sbt

```scala
// Don't forget adding your JDBC driver
libraryDependencies += "org.hsqldb" % "hsqldb" % "2.3.2"

addSbtPlugin("org.scalikejdbc" %% "scalikejdbc-mapper-generator" % "<%= @latest_version %>")
```

##### build.sbt

```scala
enablePlugins(ScalikejdbcPlugin)
```

##### project/scalikejdbc.properties

```
# ---
# jdbc settings

jdbc.driver=org.h2.Driver
jdbc.url=jdbc:h2:file:./db/hello
jdbc.username=sa
jdbc.password=
jdbc.schema=

# ---
# source code generator settings

generator.packageName=models
# generator.lineBreak: LF/CRLF
generator.lineBreak=LF
# generator.template: interpolation/queryDsl
generator.template=queryDsl
# generator.testTemplate: specs2unit/specs2acceptance/ScalaTestFlatSpec
generator.testTemplate=specs2unit
generator.encoding=UTF-8
# When you're using Scala 2.11 or higher, you can use case classes for 22+ columns tables
generator.caseClassOnly=true
# Set AutoSession for implicit DBSession parameter's default value
generator.defaultAutoSession=true
# Use autoConstruct macro (default: false)
generator.autoConstruct=false
# joda-time (org.joda.time.DateTime) or JSR-310 (java.time.ZonedDateTime java.time.OffsetDateTime java.time.LocalDateTime)
generator.dateTimeClass=java.time.ZonedDateTime
```

Usage: [/documentation/reverse-engineering](/documentation/reverse-engineering.html)

<hr/>
### Play Framework Integration
<hr/>

See in detail: [/documentation/playframework-support](/documentation/playframework-support.html)

<hr/>
### dbconsole
<hr/>

A simple console to connect database via JDBC.

##### Mac OS X, Linux

```sh
curl -L https://git.io/dbcon | sh
```

##### Windows

```
https://git.io/dbcon.bat
```

Usage: [/documentation/dbconsole](/documentation/dbconsole.html)
